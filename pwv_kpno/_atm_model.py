#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

#    This file is part of the pwv_kpno software package.
#
#    The pwv_kpno package is free software: you can redistribute it and/or
#    modify it under the terms of the GNU General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    The pwv_kpno package is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
#    Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with pwv_kpno.  If not, see <http://www.gnu.org/licenses/>.

"""This code calculates atmospheric transmission curves based on cross-section
files generated by the LSST project's phosim code and the Beer-Lambert Law.
"""

import os

import numpy as np
import scipy.interpolate as interpolate
from astropy.table import Table

from ._settings import settings

__authors__ = ['Daniel Perrefort', 'Azalee Bostroem']

__license__ = 'GPL V3'
__email__ = 'djperrefort@pitt.com'
__status__ = 'Development'


def _interp_cross_section(filename, x_fine):
    """Interpolate cross sections from a data file to a fine wavelength grid

    Args:
        filename   (str): The path of a file with MODTRAN cross-sections
        x_fine (ndarray): An array of wavelengths in microns

    Returns:
        An array of the cross section at each wavelength in cm^2
    """

    cs = np.loadtxt(filename)
    interp_cs = interpolate.interp1d(cs[:, 0], cs[:, 1], kind='nearest')
    return interp_cs(x_fine)


def _construct_atm_sys(x_fine):
    """Create an dictionary of interpolated H2O, O3, and O2 cross sections

    Cross sections are interpolated for the given array of wavelengths x_fine

    Args:
        x_fine (ndarray): An array of wavelengths in microns

    Returns:
        A dictionary containing an array of cross sections for each species
    """

    data_dir = settings._phosim_dir
    h2o = _interp_cross_section(os.path.join(data_dir, 'h2ocs.txt'), x_fine)
    o3 = _interp_cross_section(os.path.join(data_dir, 'o3cs.txt'), x_fine)
    o2 = _interp_cross_section(os.path.join(data_dir, 'o2cs.txt'), x_fine)

    return dict(h2o=h2o, o3=o3, o2=o2)


def _calculate_trans(x_fine, int_dens):
    """Calculate the atmospheric transmission for each species

    Args:
        x_fine   (ndarray): An array of wavelengths in microns
        int_dens    (dict): Dictionary with arrays of the integrated number
                             density for each species

    Returns:

    """

    transmission = dict()
    cross_sections = _construct_atm_sys(x_fine)
    for species in int_dens:
        xx, yy = np.meshgrid(cross_sections[species], int_dens[species])
        transmission[species] = np.exp(- xx * yy)

    return transmission


def _generate_atm_model(wl_start, wl_end, dispersion, int_dens):
    """Generate a model of atmospheric absorption

    Args:
        wl_start   (float): Starting wavelength of the model in angstroms
        wl_end     (float): Ending wavelength of the model in angstroms
        dispersion (float): Dispersion of the model (angstroms / pix)

    Returns:
        An array of wavelengths in Angstroms
        An array of the H2O transmission for each wavelength
    """

    num_pts = int((wl_end - wl_start) / dispersion)
    x_fine_ang = np.linspace(wl_start, wl_end, num_pts)
    x_fine_mic = x_fine_ang / 10000.  # Convert to microns
    atm_transmission = _calculate_trans(x_fine_mic, int_dens)

    return x_fine_ang, atm_transmission


def write_atm_models(output_dir):
    """Create an atmospheric model and write it to atm_model.csv

    Args:
        output_dir (str): The directory where atm_model.csv will be written
    """

    if not os.path.isdir(output_dir):
        os.makedirs(output_dir)

    # Calculate conversion from mm of PWV to mol / cm^3
    n_a = 6.02214129E23       # 1 / mol (Avogadro's constant)
    h2o_molar_mass = 18.0152  # g / mol
    h2o_density = 0.99997     # g / cm^3
    mm_to_mol_cm_3 = n_a / (h2o_molar_mass * h2o_density * 10)

    # Dictionary of sampled integrated number densities
    # In the future O2 and O3 can be included here
    pwv_range = np.arange(0.1, 31, 1)
    int_dens = {
        'h2o': pwv_range * mm_to_mol_cm_3,
    }

    wl, atm_trans = _generate_atm_model(3000, 12000, 1, int_dens)
    out_table = Table([wl], names=['wavelength'])
    out_table['00.0'] = np.ones(len(out_table))

    for pwv, trans in zip(pwv_range, atm_trans['h2o']):
        pwv_as_str = '{:.1f}'.format(pwv).zfill(4)
        out_table[pwv_as_str] = trans

    out_table.write(os.path.join(output_dir, 'atm_model.csv'), overwrite=True)
